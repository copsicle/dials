{"version":3,"sources":["components/TextView.js","components/Navbar.js","components/AltitudeBar.js","components/Compass.js","components/HorizonAngle.js","components/DialApp.js","index.js"],"names":["TextView","className","this","props","dials","alt","his","adi","React","Component","Navbar","state","visual","disabled","onClick","click","AltitudeBar","style","position","backgroundColor","opacity","width","height","left","bottom","Compass","color","borderRadius","border","borderWidth","textAlign","fontSize","margin","transform","HorizonAngle","backgroundImage","parseInt","DialApp","getDialData","bind","event","setState","fetch","window","location","href","method","then","response","json","data","Object","assign","catch","error","console","log","message","interval","setInterval","tick","clearInterval","changeVisualState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67fe71a2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TextView.css';\n\nclass TextView extends React.Component {\n    static propTypes = {\n        dials: PropTypes.object,\n    };\n\n    render() {\n        return (\n            <div className=\"Text-Container\">\n                <span>Altitude: {this.props.dials.alt}</span>\n                <span>HIS: {this.props.dials.his}</span>\n                <span>ADI: {this.props.dials.adi}</span>\n            </div>\n        );\n    }\n}\n\nexport default TextView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css'\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        if (this.props.visual){\n            // If in visual mode highlight and disable the visual button\n            return (\n                <div className=\"Button-Container\">\n                    <div>\n                        <button disabled={true}>Visual</button>\n                    </div>\n                    <div>\n                        <button onClick={this.props.click}>Text</button>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            // Otherwise highlight and disable the text button\n            return (\n                <div className=\"Button-Container\">\n                    <div>\n                        <button onClick={this.props.click}>Visual</button>\n                    </div>\n                    <div>\n                        <button disabled={true}>Text</button>\n                    </div>\n                </div>\n            );\n        }    \n    }\n}\n\nNavbar.propTypes = {\n    visual: PropTypes.bool,\n    click: PropTypes.func,\n};\n\nexport default Navbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AltitudeBar.css';\n\nexport default class AltitudeBar extends React.Component {\n    // Meter - The container with the number values\n    // Bar - The black rectangle which indicates the value\n    static propTypes = {\n        alt: PropTypes.number,\n    };\n\n    render() {\n        return (\n            <div className=\"Meter-Container\">\n                <div className=\"Meter\">\n                    <div className=\"Spacer-Top\">3000</div>\n                    <div className=\"Spacer-Middle\">2000</div>\n                    <div className=\"Spacer-Middle\">1000</div>\n                    <div className=\"Spacer-Bottom\">0</div>\n                    <div style={{\n                        // Style for moving the bar in the meter by altitude value\n                        position: 'absolute',\n                        backgroundColor: 'black',\n                        opacity: \"0.8\",\n                        width: '150%',\n                        height: '3%',\n                        left: '-25%',\n                        // Get precentage to move up the meter while accounting for bar height\n                        bottom: ((this.props.alt / 30) - 1.5) + '%',\n                    }}></div>\n                </div>\n            </div>\n        );\n    }\n}\n\n//export default AltitudeBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Compass.css';\n\nexport class Compass extends Component {\n    static propTypes = {\n        his: PropTypes.number,\n    }\n\n    render() {\n        return (\n            <div className=\"Compass-Container\">\n                <div style={{\n                    color: \"black\",\n                    backgroundColor: \"#aaaaaa\",\n                    width: \"25vw\", height: \"25vw\",\n                    borderRadius: \"50%\",\n                    border: \"solid white\",\n                    borderWidth: \"0.25vw\",\n                    textAlign: \"center\",\n                    fontSize: \"2.5vw\",\n                    margin: \"0 auto\",\n                    position: \"relative\",\n                    transform: `rotate(-${this.props.his}deg)`,\n                }}>\n                    <span>0</span>\n                    <span>90</span>\n                    <span>180</span>\n                    <span>270</span>\n                </div>\n                <div className=\"Pointer\"></div>\n            </div>\n        );\n    }\n}\n\nexport default Compass;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './HorizonAngle.css';\n\nexport default class HorizonAngle extends Component {\n    static propTypes = {\n        adi: PropTypes.number,\n    }\n\n    render() {\n        return (\n            <div className=\"Horizon-Container\">\n                <div style={{\n                    backgroundImage: `linear-gradient(blue ${this.props.adi <= 0 ? 0 : this.props.adi}%, #00ff00 ${this.props.adi >= 0 ? 100 : parseInt(this.props.adi) + 100}%)`,\n                    width: \"25vw\", height: \"25vw\",\n                    borderRadius: \"50%\",\n                    border: \"solid white\",\n                    borderWidth: \"0.25vw\",\n                    margin: \"0 auto\",\n                    position: \"relative\",\n                }}>\n\n                </div>\n            </div>\n        )\n    }\n}\n","// Main container for the web application\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport TextView from './TextView';\nimport Navbar from './Navbar';\nimport AltitudeBar from './AltitudeBar';\nimport Compass from './Compass';\nimport HorizonAngle from './HorizonAngle';\nimport './DialApp.css';\n\nclass DialApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Values from the server to pass down to the components\n            dials: {\n                // Altitude (between 0 - 3000)\n                alt: 1500,\n                // Rotation (between 0 - 360)\n                his: 123,\n                // Horizon Angle (between -100 - 100)\n                adi: 0,\n            },\n            // Boolean for switching between visual and text mode (true - visual mode)\n            visual: true,\n        };\n        this.getDialData = this.getDialData.bind(this);\n    }\n\n    changeVisualState(event) {\n        // Method for the navbar to change the visual state\n        this.setState({visual: !this.state.visual})\n    }\n\n    getDialData() {\n        // Get JSON of dial values from the server and parse into the dials state\n        fetch(window.location.href + 'api/data', {method: 'GET'}).then((response) => response.json()).then((data) => {\n            this.setState({dials: Object.assign({}, data)});\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n    \n    componentDidMount() {\n        // Get initial data\n        this.getDialData();\n        // Set tick rate to 1 second\n        this.interval = setInterval(() => this.tick(), 1000);\n    }\n\n    tick() {\n        // Update dial values every tick\n        this.getDialData();\n    }\n\n    componentWillUnmount() {\n        // Clear tick rate when unmounted\n        clearInterval(this.interval);\n    }\n\n    render() {\n        // Switch rendering between visual and text mode\n        if (this.state.visual){\n            // Render the navbar and visual components if in visual mode\n            return (\n                <div className=\"Box\">\n                    <Navbar visual={this.state.visual} click={this.changeVisualState.bind(this)} />\n                    <AltitudeBar alt={this.state.dials.alt}/>\n                    <Compass his={this.state.dials.his}/>\n                    <HorizonAngle adi={this.state.dials.adi}/>\n                </div>\n            );\n        } else {\n            // Render the navbar and the text component only if not\n            return (\n                <div className=\"Box\">\n                    <Navbar visual={this.state.visual} click={this.changeVisualState.bind(this)} />\n                    <TextView dials={this.state.dials} />\n                </div>\n            );\n        }\n    }\n}\n\nexport default DialApp;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport DialApp from \"./components/DialApp\"\n\n// Render single application in root\nReactDOM.render(<DialApp />, document.getElementById(\"root\"))"],"sourceRoot":""}